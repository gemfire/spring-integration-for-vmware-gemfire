plugins {
    id "java-library"
    id "io.spring.dependency-management" version "1.1.3"
    id 'gemfire-repo-artifact-publishing'
    id 'spring-java-jar'
}

java {
    sourceCompatibility = "17"
    targetCompatibility = "17"
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    title = "Spring Integration ${getSpringIntegrationBaseVersion()} for VMware GemFire ${getGemFireBaseVersion()} Java API Reference"
    failOnError=false
}

project.ext.set("pomProjectLongName", "Spring Integration for VMware GemFire")
project.ext.set("pomProjectArtifactName", "spring-integration-6.1-gemfire-${getGemFireBaseVersion()}")
project.ext.set("pomProjectDescription", "Spring Integration For VMware GemFire")

dependencyManagement {
    imports {
        mavenBom("org.springframework.integration:spring-integration-bom:$springIntegrationVersion")
    }
}

dependencies {
    api "org.springframework.integration:spring-integration-core"
    api("com.vmware.gemfire:spring-data-3.1-gemfire-10.0:$springDataGemfireVersion") {
        exclude group: "org.springframework"
        exclude module: "shiro-event"
        exclude module: "shiro-lang"
        exclude module: "shiro-crypto-hash"
        exclude module: "shiro-crypto-cipher"
        exclude module: "shiro-config-ogdl"
        exclude module: "shiro-config-core"
        exclude module: "shiro-cache"
        exclude module: "commons-logging"
    }
    api "commons-io:commons-io:$commonsIO"
    compileOnly("com.vmware.gemfire:gemfire-core:$gemfireVersion") {
        exclude module: "commons-logging"
    }
    compileOnly("com.vmware.gemfire:gemfire-cq:$gemfireVersion")

    testImplementation(platform("org.junit:junit-bom:$junitBom"))
    testImplementation "org.springframework.integration:spring-integration-test-support"

    testImplementation("com.vmware.gemfire:gemfire-core:$gemfireVersion") {
        exclude module: "commons-logging"
    }
    testImplementation("com.vmware.gemfire:gemfire-cq:$gemfireVersion")

    testImplementation "junit:junit"
    testImplementation "org.assertj:assertj-core:$assertJCore"
    testImplementation "org.springframework:spring-test:$springTest"
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testImplementation "ch.qos.logback:logback-classic:$logback"
    testImplementation "org.slf4j:log4j-over-slf4j:$log4jOverSlf4j"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation 'com.vmware.gemfire:gemfire-testcontainers:1.0'
}

tasks.withType(JavaForkOptions) {
    jvmArgs "--add-opens", "jdk.management/com.sun.management.internal=ALL-UNNAMED"
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
    maven {
        credentials {
            username "$gemfireRepoUsername"
            password "$gemfireRepoPassword"
        }
        url = uri("https://commercial-repo.pivotal.io/data3/gemfire-release-repo/gemfire")
    }
    def additionalMavenRepoURLs = project.ext.find('additionalMavenRepoURLs')
    if (additionalMavenRepoURLs != null && !additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
        additionalMavenRepoURLs.split(',').each {
            project.getRepositories()
                    .maven(mavenRepository -> {
                        mavenRepository.setUrl(uri(it.toString()))
                    })
        }
    }
}

String getSpringIntegrationBaseVersion() {
    return getBaseVersion(springIntegrationVersion)
}

String getGemFireBaseVersion() {
    return getBaseVersion(gemfireVersion)
}

String getBaseVersion(String version) {
    def split = version.split("\\.")
    if (split.length < 2) {
        throw new RuntimeException("gemfireVersion is malformed")
    }
    return "${split[0]}.${split[1]}"
}
